/*
Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.
 */

public class Solution_add {
    public char findTheDifference(String s, String t) {
        // Initialize variables to store sum of ASCII codes for 
        // each string
        int charCodeS = 0, charCodeT = 0;
        // Iterate through both strings and char codes
        for (int i = 0; i < s.length(); ++i) charCodeS += (int)s.charAt(i);
        for (int i = 0; i < t.length(); ++i) charCodeT += (int)t.charAt(i);
        // Return the difference between 2 strings as char
        return (char)(charCodeT - charCodeS);
    }
}

/*
UPDATE:
Thanks to @zzhai for providing this optimization! :) 
"1 optimization: As t.length() is just 1 character longer than s.length(),
we can use 1 pass to process both strings (20% better runtime performance)."
 */
public class Solution_add_better {
	public char findTheDifference(String s, String t) {
	    int charCode = t.charAt(s.length());
	    // Iterate through both strings and char codes
	    for (int i = 0; i < s.length(); ++i) {
	          charCode -= (int)s.charAt(i);
	          charCode += (int)t.charAt(i); 
	    }
	    return (char)charCode;
	}
}

public class Solution_bit {
    public char findTheDifference(String s, String t) {
        int n = t.length();
    	char c = t.charAt(n - 1);
    	for (int i = 0; i < n - 1; ++i) {
    		c ^= s.charAt(i);
    		c ^= t.charAt(i);
    	}
    	return c;
    }
}

public class Solution {
    public char findTheDifference(String s, String t) {
        int[] freq = new int[26];
        char[] ss = s.toCharArray();
        char[] tt = t.toCharArray();
        for(int i = 0; i < tt.length; i++) freq[tt[i] - 'a']++;
        for(int i = 0; i < ss.length; i++) freq[ss[i] - 'a']--;
        for(int i = 0; i < freq.length; i++) if(freq[i] == 1) return (char)(i+'a');
        return ' ';
    }
}

public class Solution_faster {
    public char findTheDifference(String s, String t) {
        for (int i = 0; i < 26; i++) alpha[i] = 0;
        for (char c : s.toCharArray())
            alpha[ c - 'a' ]++;

        for (char c : t.toCharArray()) {
           //could do decrement first, then check but yeah
            if (--alpha[c - 'a'] < 0)
                return c;
        }

        return 0;
    }
}